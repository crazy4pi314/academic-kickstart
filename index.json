[{"authors":["admin_cv"],"categories":null,"content":"Sarah completed her PhD in physics (quantum information) at the University of Waterloo’s Institute for Quantum Computing and was a postdoctoral research fellow at Macquarie University in Sydney, Australia. Prior to that she was an undergraduate research fellow at CalTech, in Pasadena, and with the National Institute of Standards and Technology, in Boulder, CO and also worked as a Mathematica kernel developer with Wolfram Research in Urbana-Champaign.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1594451810,"objectID":"e26dbbc9f2cf6a435e144b507a8eae23","permalink":"/authors/admin_cv/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin_cv/","section":"authors","summary":"Sarah completed her PhD in physics (quantum information) at the University of Waterloo’s Institute for Quantum Computing and was a postdoctoral research fellow at Macquarie University in Sydney, Australia. Prior to that she was an undergraduate research fellow at CalTech, in Pasadena, and with the National Institute of Standards and Technology, in Boulder, CO and also worked as a Mathematica kernel developer with Wolfram Research in Urbana-Champaign.","tags":null,"title":"Dr. Sarah Kaiser","type":"authors"},{"authors":["admin"],"categories":null,"content":"Dr. Sarah Kaiser has spent much of her career developing new quantum hardware in the lab, from satellites to hacking quantum cryptography hardware. Communicating what is so exciting about quantum is her passion, and she loves finding new demos and tools to help enable the quantum open source community to grow. When not at the keyboard she loves kayaking, laser cutting everything (safe), and writing books about engineering for kids.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1594451810,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Dr. Sarah Kaiser has spent much of her career developing new quantum hardware in the lab, from satellites to hacking quantum cryptography hardware. Communicating what is so exciting about quantum is her passion, and she loves finding new demos and tools to help enable the quantum open source community to grow.","tags":null,"title":"Sarah Kaiser","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"18d742c8500e3e95a88d95021ee7f3f7","permalink":"/blog/1/01/01/posts/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/1/01/01/posts/","section":"post","summary":"","tags":null,"title":"Posts","type":"post"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"e50d1df6746968014eaaa2f617b71d4d","permalink":"/blog/1/01/01/popular-topics/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/1/01/01/popular-topics/","section":"post","summary":"","tags":null,"title":"Popular Topics","type":"post"},{"authors":["Sarah C. Kaiser","Christopher Granade"],"categories":null,"content":"","date":1601510400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"c97c4cdc1667c9ab24a0d72bcaa9e387","permalink":"/publication/kaiser-learn-quantum-computing-2020/","publishdate":"2020-04-30T00:59:59.832757Z","relpermalink":"/publication/kaiser-learn-quantum-computing-2020/","section":"publication","summary":"Learn Quantum Computing with Python and Q# demystifies quantum computing. Using Python and the new quantum programming language Q#, you'll learn QC fundamentals as you apply quantum programming techniques to real-world examples including cryptography and chemical analysis. Learn Quantum Computing with Python and Q# builds your understanding of quantum computers, using Microsoft's Quantum Development Kit to abstract away the mathematical complexities. You'll learn QC basics as you create your own quantum simulator in Python, then move on to using the QDK and the new Q# language for writing and running algorithms very different to those found in classical computing. Purchase of the print book includes a free eBook in PDF, Kindle, and ePub formats from Manning Publications.","tags":["Computers / Programming Languages / Python"],"title":"Learn Quantum Computing with Python and Q#: A Hands-on Approach","type":"publication"},{"authors":[],"categories":null,"content":"","date":1589316360,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"f7c783bab70fcce3784f4ce5c8f41162","permalink":"/research/talks/2020-wsu-colloquium/","publishdate":"2020-05-12T13:46:00-07:00","relpermalink":"/research/talks/2020-wsu-colloquium/","section":"talk","summary":"","tags":[],"title":"2020 Wsu Colloquium","type":"talk"},{"authors":[],"categories":null,"content":"","date":1589316329,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"d11c86d75859c651a2e796ec407ce471","permalink":"/research/talks/2020-cuwip/","publishdate":"2020-05-12T13:45:29-07:00","relpermalink":"/research/talks/2020-cuwip/","section":"talk","summary":"","tags":[],"title":"2020 Cuwip","type":"talk"},{"authors":[],"categories":null,"content":"","date":1589316280,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"93fe0f9f8e36dd0d202dfc60a884cfcc","permalink":"/research/talks/2019-hackaday-supercon/","publishdate":"2020-05-12T13:44:40-07:00","relpermalink":"/research/talks/2019-hackaday-supercon/","section":"talk","summary":"","tags":[],"title":"2019 Hackaday Supercon","type":"talk"},{"authors":[],"categories":null,"content":"","date":1589316270,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"9e38a9a0a6c0a7540f68eb2a4da720be","permalink":"/research/talks/2019-pyladies/","publishdate":"2020-05-12T13:44:30-07:00","relpermalink":"/research/talks/2019-pyladies/","section":"talk","summary":"","tags":[],"title":"2019 Pyladies","type":"talk"},{"authors":[],"categories":null,"content":"","date":1589316258,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"76bb023dc4dd5cf15eda4239e14ac8cc","permalink":"/research/talks/2019-ml4all/","publishdate":"2020-05-12T13:44:18-07:00","relpermalink":"/research/talks/2019-ml4all/","section":"talk","summary":"","tags":[],"title":"2019 Ml4all","type":"talk"},{"authors":[],"categories":null,"content":"","date":1589316248,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"593fc36bfb73c5acfc7f5be5e309d134","permalink":"/research/talks/2019-build/","publishdate":"2020-05-12T13:44:08-07:00","relpermalink":"/research/talks/2019-build/","section":"talk","summary":"","tags":[],"title":"2019 Build","type":"talk"},{"authors":[],"categories":null,"content":"","date":1588632065,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"cb202379c5fda188abd1484fe240597a","permalink":"/research/talks/extending-the-reach-of-qkd-satellite-prototype-for-quantum-communication/","publishdate":"2020-05-04T15:41:05-07:00","relpermalink":"/research/talks/extending-the-reach-of-qkd-satellite-prototype-for-quantum-communication/","section":"talk","summary":"Long-distance quantum communication systems are of interest for commercial and fundamental scientific projects. Currently, the link length of these systems is limited by optical fiber losses or free-space line of sight. Our goal is to use low earth orbit satellites as a relay, enabling distant locations to establish a link and exchange quantum systems, including those that were too far apart to link previously. In this talk, I will describe our progress towards a proposed quantum receiver satellite payload that has a passive polarization analyzer to detect photons sent from ground stations. We have designed and constructed prototypes of the QEYSSAT (Quantum EncrYption and Science SATellite) payload with commercial and government assistance. These prototypes comprise almost the entire system needed for a form-fit-function payload and ground station. I will present tests of our system in realistic scenarios representing the environments it will face. In particular, I will present the latest results of testing this system in an aircraft. Finally, I will also identify remaining challenges for practical long distance quantum communication.","tags":[],"title":"Extending the reach of QKD: Satellite prototype for quantum communication","type":"talk"},{"authors":[],"categories":[],"content":"Post co-authored with Chris Granade, my co-author on Learn Quantum Computing with Python and Q#!\n All of the Q#, C# and Python examples in this post can be run online on Binder. It may take a while to build the docker container so read ahead, and you can jump back when it\u0026rsquo;s done. 😊\n Normally when you read a post or an article about a quantum programming language like Q#, you\u0026rsquo;ll see stuff about:\n what qubits are, what a quantum computer even is, or how superposition and entanglement can be used together to solve hard problems.  That\u0026rsquo;s all really important to help understand why quantum computing is so cool, and how you can get started with it, but there is something that\u0026rsquo;s easily lost in all of that: quantum programs are just special kinds of classical programs.\nWhat do we mean by that? At their core, quantum programs are classical programs that send instructions to quantum devices. That means that a lot of what you already know about classical programming still applies. In this post, we\u0026rsquo;ll look at how Q# represents one incredibly common classical data structure in what may seem to be a slightly unusual way, and how that helps make Q# a great classical language for controlling quantum devices.\nArrays in Q# via GIPHY\nWhatever they might be called in a particular language, arrays are an incredibly common and useful data structure for developers. There can be differences in how they behave from language to language, so it might be helpful to take a look at how they work in Q#.\nConsider the following snippet where you are creating two arrays (a and b) in Q#.\nmutable a = [2, 4, 6]; let b = a; // Change the first element of `a` to 1. set a w/= 0 \u0026lt;- 1; Message($\u0026quot;{b}\u0026quot;);  What will the value of b be after running all the code above? Reminder you can run all the code in this post on Binder.\n via Gfycat\nThe answer here comes down to the difference between whether we think of a variable as storing a value, or as being a reference to something. In Q#, everything is a value, so when we define a new variable with let b = a, we tell the Q# compiler that we want the value of b to be equal to whatever the value of a is.\nTherefore, the snippet above will print out the array [2, 4, 6], because after we defined b as having the value that a had at that moment ([2, 4, 6]), not a reference to the variable a. Put differently, b does not know anything about a, let alone any later changes to a.\nThinking of arrays as values also helps explain what w/= is all about in the code above. In Q#, w/ is a ternary operator (that is, one with three arguments) that makes a new array given: an old array, an index you want to replace, and a new element to put at that index. For example:\nlet a = [2, 4, 6] w/ 0 \u0026lt;- 1; Message($\u0026quot;{a}\u0026quot;); // Prints [1, 4, 6].  Since w/ is an operator, you can use it like +, *, or any other operator to make Q# values:\nlet a = ([2, 4, 6] w/ 0 \u0026lt;- 1 w/ 2 \u0026lt;- 10) + [20]; Message($\u0026quot;{a}\u0026quot;); // Prints [1, 4, 10, 20].  When updating the value of a mutable variable, Q# provides helpful shorthand for using an operator in-place as an assignment operator:\nmutable a = 10; set a += 1; Message($\u0026quot;{a}\u0026quot;); // Prints 11.  The same exact shorthand works for w/, so you can use w/= as a shorthand:\nmutable a = [2, 4, 6]; // Both of the following lines are equivalent: set a = a w/ 0 \u0026lt;- 1; set a w/= 0 \u0026lt;- 1;  What makes all of this work is that in Q#, everything is a value. The array [2, 4, 6] is a value in precisely the same way as 2 is a value, or that true, \u0026quot;foo\u0026quot;, and 3.14 are values.\nHow do Q# arrays compare to similar concepts in other languages? In Python, there isn\u0026rsquo;t exactly an array type, so let\u0026rsquo;s look at some related types you might use in a similar way. Lists, tuples, and strings in Python are ways of organizing collections of elements, so let\u0026rsquo;s compare how they work to Q# arrays.\nTuples and strings are immutable, meaning that they cannot be changed after they are created. What happens in the following snippet?\na = \u0026quot;Hello world!\u0026quot; b = a a = a[:5] + \u0026quot; Cruel\u0026quot; + a[5:] print(b)  This will print Hello world!, because b is immutable once created. The third line where we construct a new value for a works because we are not trying to change a's previous value, but give an entirely new one.\nC# takes a very similar approach, treating strings as immutable. Try running the following example in a C# Notebook and see what you get!\nvar s = \u0026quot;abc\u0026quot;; var t = s; s = s.Remove(1, 1).Insert(1, \u0026quot;B\u0026quot;); (s, t)  This immutability makes it really easy to reason about side-effects, since nothing else in your Python program can possibly mess with what a is. Where immutability in Python gets inconvenient, though, is if you want to replace just one element of a tuple or string:\n\u0026gt;\u0026gt;\u0026gt; a = \u0026quot;Hello, world!\u0026quot; \u0026gt;\u0026gt;\u0026gt; a[-1] = \u0026quot;?\u0026quot; Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; TypeError: 'str' object does not support item assignment  To help with this, Python also provides lists, which are really similar to tuples, but are mutable; that is, the contents of lists can be changed after they are created.\n\u0026gt;\u0026gt;\u0026gt; a = [2, 4, 6] \u0026gt;\u0026gt;\u0026gt; a[-1] = 10 \u0026gt;\u0026gt;\u0026gt; a [2, 4, 10]  One way to think about Q# arrays, then, is as being similar to Python tuples, but with a cool operator (w/) that lets you use them in the same ways as lists even without needing mutable collections. That lets you get all the benefits and predictability of immutable collections like Python strings and tuples, and like C# strings, but with the flexibility that you would normally expect from mutable collections like Python lists and and C# arrays.\nYou can use Q# arrays to implement a wide range of classical computing tasks from within your quantum programs, even including things like the quicksort algorithm!\nfunction Sorted\u0026lt;'T\u0026gt;(comparisonFunction : (('T, 'T) -\u0026gt; Bool), inputArray: 'T[]) : 'T[] { if (Length(inputArray) \u0026lt;= 1) { return inputArray; } let pivot = Head(inputArray); let left = Filtered(comparisonFunction(_, pivot), Rest(inputArray)); let right = Filtered(Compose(Not, comparisonFunction(_, pivot)), Rest(inputArray)); return Sorted(comparisonFunction, left) + [pivot] + Sorted(comparisonFunction, right); }  Because Q# arrays are values, it\u0026rsquo;s really easy to predict how they\u0026rsquo;ll behave in your quantum programs, even as you do things like use the Adjoint functor to run parts of your programs backwards. Arrays are a great example of how the classical programming features of Q# are designed, making it easy to use for quantum computing 💖\nMore Resources! Want to learn more about arrays in Q# or Quantum Computing? Check out the links below for some good resources! 😀\n  Learn Quantum Computing with Python and Q#, Chapter 8  Microsoft.Quantum.Arrays API Reference  Description of the type model for Q#  Discussion of data structures in the Q# Libraries  Copy and update expression Q# docs  Q# Blog post by Bettina Heim  ","date":1588205413,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"27d8d1254e7ded11b96fb98b90d829ce","permalink":"/blog/2020/04/29/an-array-of-facts-on-arrays-in-q/","publishdate":"2020-04-29T17:10:13-07:00","relpermalink":"/blog/2020/04/29/an-array-of-facts-on-arrays-in-q/","section":"post","summary":"Post co-authored with Chris Granade, my co-author on Learn Quantum Computing with Python and Q#!\n All of the Q#, C# and Python examples in this post can be run online on Binder.","tags":[],"title":"An array of facts on arrays in Q#","type":"post"},{"authors":[],"categories":[],"content":"","date":1588140161,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"8eee2579c30a6f154e4aeab3a41c553b","permalink":"/project/qsharp-community/","publishdate":"2020-04-28T23:02:41-07:00","relpermalink":"/project/qsharp-community/","section":"project","summary":"","tags":[],"title":"Qsharp Community","type":"project"},{"authors":[],"categories":[],"content":"","date":1588140150,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"adcfff44d2a07ea650499c608b54f955","permalink":"/project/wiqca/","publishdate":"2020-04-28T23:02:30-07:00","relpermalink":"/project/wiqca/","section":"project","summary":"","tags":[],"title":"Women in Quantum Computing and Applications (WIQCA)","type":"project"},{"authors":[],"categories":[],"content":" This is a post contributing to #QsAdvent 2019\n Tis\u0026rsquo; the season of holiday parties, gathering co-workers and their families to eat much delicious food, and share pictures of their pets. Compared with most of my work environments, having a more diverse group causes a marked change in conversation tone and participation. After a few such parties lately, I wanted to reflect on how we as a community can encourage diversity in quantum computing. If the kind of inclusion at a holiday party can change how and who we talk to, how much different would our research progress look if we had a more diverse community? If we don\u0026rsquo;t take proactively steps to invite everyone to the quantum party, we will be stuck with the current \u0026ldquo;diversity\u0026rdquo; endemic to the system.\nWhat can we do to make sure everyone is invited to the party? There are lots of different ways we can encourage inclusion in quantum computing, from having codes of conduct at events like hackathons and meetups, to encouraging open community contributions and discussion online with open source projects. I could probably write a number of posts on these topics, but since this is a Q# advent post, I want to talk specifically here about what I have learned about being more inclusive when teaching Q#.\nSo, why does documentation and learning tools matter? Whenever I get to start a new project in a language or toolchain I don\u0026rsquo;t know I go straight to the docs and whatever \u0026ldquo;Hello World!\u0026rdquo; tutorials I can find. I know for myself, if the first 101 level tutorial I find uses only male pronouns or all kinds of terms I don\u0026rsquo;t know, it is easy to get discouraged. Given quantum computing\u0026rsquo;s academic background, it is easy to slip into language that is familiar and comfortable at a physics conference but that is really alienating for someone new to the field. With this post, I want to offer three tips I have learned to help make the Q# projects I am working on more inclusive. I also encourage you if you have more ideas or discussion on this topic to join the qsharp.community chat!\nTeach by exploration and games One of the biggest challenges my co-author Chris Granade and I have run into when working on our book on Q# is motivating some of the techniques and algorithms we are trying to teach. What happens is the algorithms have been developed usually with applications in mind that are very technical. By the time you have explained the physics of the motivating example, it is hard to make progress on what you actually want to teach which is the actual algorithm or quantum development technique. Especially if we want to fine more applications for quantum computing, I think it is hard to \u0026ldquo;bake in\u0026rdquo; so much of these initial examples to how we are teaching the techniques themselves. We can teach sorting algorithms without making everyone learn the gory details of a specific data set that it was used on first.\nOur approach to avoid this unnecessary confusion and baggage is to re-formulate the scenarios or examples as games. We were inspired by the non-local games already a big part of quantum for talking about correlation and testing quantum mechanics. When everything is a game, its easy to focus on writing code that would win.\nFor example, phase estimation is a very common quantum algorithm that is useful for transferring information about operations between global and local phases. This is important as we can only measure local phases so we need a way to shuffle phase around. If we look at the way Wikipedia and Quantum Computation and Quantum Information describes phase estimation:\n Given a unitary matrix 𝑈 and a quantum state |𝜓⟩ such that 𝑈|𝜓⟩ =e^{2𝜋𝑖𝛳}|𝜓⟩, the algorithm estimates the value of 𝛳 with high probability within additive error 𝜀 , using 𝑶(1/𝜀) controlled-U operations.\n If you don\u0026rsquo;t already know why this might be cool, unpacking it can take a fair bit of math.\nEven my new pup Chewie was not really interested in unitaries 😂\nYou can take the same algorithms and put it in terms of a game like in Chapter 8 of my book (where yes, many of the games involve characters from Arthurian legends):\n Dagonet is bored in the castle one evening and decides to try and engage Lancelot in a game. Dagonet has a black box which applies a rotation operation to the input qubit by some angle. Lancelot can provide an additional number input to the black box which gets multiplied with the rotation angle Dagonet already secretly hid in the box, and then is angle the input qubit is rotated by. What is Lancelot\u0026rsquo;s best strategy to guess Dagonet\u0026rsquo;s hidden angle as efficiently as possible?\n This second way of presenting the same scenario is much more approachable and will help reduce any intimidation presented by the mathematical notation. It also allows the learners to have a mental model for the scenario, and use that to help drive further questions and exploration. Q# really makes the games based approach easy as it is a fairly high level language, so it\u0026rsquo;s easy to skip how things are implemented to start and focusing on why. The libraries for Q# also help a lot in that they can allow users to jumpstart fairly complicated algorithms by using library operations as subroutines.\nIf you like this approach or want to see more, check out Learn Quantum Computing with Python and Q#, now in early preview from Manning!\nGet over the math As we saw with the previous tip, the math used to describe quantum computing can be intimidating. One of the most common things I hear when I start talking with someone about quantum computing is \u0026ldquo;wow that\u0026rsquo;s a lot of math! I hate math!\u0026rdquo; or something to that effect. A great strength of quantum programming is that we don\u0026rsquo;t need to start with the math to teach what is going on. Knowing the math we know to describe the quantum systems is still helpful, and I am not advocating from cutting it out entirely. When we start with the math, and especially without good introductions/right audiences it is easy to scare folks away.\nWith tools like Q# and the QDK, can jump right away to writing programs for quantum computers. It allows people to start playing around with algorithms and libraries, and not getting stuck in the math. Once they feel comfortable with the language and syntax they have a valuable tool that can help them when they start getting curious about the math. If something doesn\u0026rsquo;t make sense or they want to check their work, they can always just run the Q# code and dump the state of the simulator. There someone else has done the hard work of translating all of the math into software, and the student can use my colleagues\u0026rsquo; favorite development technique of tweak-compile-tweak 😊 If visual tools resonate with the student, the Q# visual debugger can be a really great tool to help see what is going on without needing to doing the math by hand.\nHelp folks get to programming faster When learning a new language or starting a new project, one of the hardest parts can be setting up the development environment to get everything to work right. Then invariably, some Windows Update will break everything (or me just absentmindedly updating some part of the tool chain for another project). However, especially in a classroom setting the variety of devices and operating systems, it is extremely desirable to get up and running as quickly as possible. Having run some workshops and tutorials, I know the hard way what its like to have a whole room full of people trying to get everything up and running for a project from scratch 😵 That\u0026rsquo;s where having the Q# Katas as Jupyter notebooks you can run in your browser and the entire Quantum Development Kit useable from the browser with Visual Studio Online can really be handy. I can just prepare a notebook and conda enviroment ahead of time and with just one click, everyone can be on the same page, ready to start developing together💖\nOn Dec 22nd, check out Chris Granade\u0026rsquo;s #QsAdvent post on reproducible research, which gets into more detail on containerizing and reproducible use of the QDK.\nUse language effectively At the end of the day we all must go through and document projects and write the tutorials. we have to spend some time thinking about words and how to communicate the cool stuff we learned. This is a huge opportunity to make sure that the words we are actually using do encourage and include as many learners as possible. Some specific examples of this are:\n Pronoun use: Many technical docs will often default to masculine pronouns, make sure to either mix it up as you write/speak and use a variety of pronouns. Better yet, just use they! Proper nouns in naming: As highlighted in the Q# style guide, naming things after \u0026ldquo;important\u0026rdquo; people can be difficult if your audience is not familiar with them. Especially as the quantum community grows past its physics roots, naming something a Fredkin operation conveys far less information than if it was called Controlled SWAP. Terms that are racist/misogynistic/harmful: We have seen the rise of some terms in quantum computing, like \u0026ldquo;quantum supremacy\u0026rdquo; that are directly harmful to the community. For example, see the open letter posted in Nature that clarifies why we should stop using this term immediately. For more on this topic, see this fabulous blog by Emma McKay.  Conclusion One of the most exciting things to me is to see how this new quantum development community grows, and how we have the power to shape it. This is why inclusive docs, tutorials, blog posts, etc. are all so important as is how we can invite people to give quantum computing a go.\n On social media use the tags #qsharp, #AzureQuantum, and #qsharpeningmyskills so all quantum developers can learn together 💖\n Happy Hamiltonians and may you find your ground state in 2020! 🎁⛄❄🍷🎶💻\n  Q# Community  MSFT Quantum Team Blog  Q# Advent Calendar  ","date":1576566000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"8fdb5037a64d35c8fefdbbdd47b54c85","permalink":"/blog/2019/12/17/party-invitations/","publishdate":"2019-12-17T00:00:00-07:00","relpermalink":"/blog/2019/12/17/party-invitations/","section":"post","summary":"This is a post contributing to #QsAdvent 2019\n Tis\u0026rsquo; the season of holiday parties, gathering co-workers and their families to eat much delicious food, and share pictures of their pets.","tags":[],"title":"Party Invitations:","type":"post"},{"authors":null,"categories":null,"content":"","date":1560297600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"fd36605688ef45e10dc233c860158012","permalink":"/cv/","publishdate":"2019-06-12T00:00:00Z","relpermalink":"/cv/","section":"","summary":"Dr. Sarah Kaiser's CV","tags":null,"title":"CV","type":"widget_page"},{"authors":["Chris Ferrie","Sarah Kaiser"],"categories":null,"content":"","date":1548979200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"866eb6840d9244f4968e539390f65b38","permalink":"/publication/ferrie-robotics-babies-2019/","publishdate":"2020-04-30T00:59:59.829765Z","relpermalink":"/publication/ferrie-robotics-babies-2019/","section":"publication","summary":"Help your future genius become the smartest baby in the room by introducing them to robotics with the next installment of the Baby University board book series! Simple explanations of complex ideas for your future genius! Robotics for Babiesis a colorful, simple introduction to the technology behind robots. Full of scientific and mathematical information from expert Dr. Sarah Kaiser and Chris Ferrie, this is the perfect book to teach complex robotics concepts in a simple, engaging way. It's never too early to become a scientist! Set the children in your life on a lifelong path to learning with the next incredible installment of the Baby University board book series. Other Baby University titles include Quantum Physics for Babies, Rocket Science for Babies, and many more!","tags":null,"title":"Robotics for Babies","type":"publication"},{"authors":[],"categories":[],"content":"I always start maker projects with the best of intentions to blog what my partner @cgranade and I work on, but sometimes in the excitement of making something new, blogging can get forgotten. An important part of the engineering process is documentation, though, so it seems fitting to kick-off posting some of the stuff we make with a fun way to personalize books!\nIn this episode, my partner and I had just gone out and bought a bunch of sharpies because my first book (such an amazing feeling!!) is now out, The ABCs of Engineering with Chris Ferrie.\nI had promised a bunch of people signed copies, and wanted some good ammo. I started working on the signature I wanted to use, but really didn\u0026rsquo;t like how the Sharpies made it look, or how easily the signatures could be wiped off some of the printing.\nSo I thought, how could I make this more permanent and more personal...  \u0026ldquo;Can this problem be solved with lasers (y/n)?\u0026rdquo;\ny\n The mission: Take the signature that I was practicing to sign the books with, and turn that into something that could be etched on a board book.\nI have to thank @cgranade for his help on this, he was the official laser cutter whisperer for this project (and because I don\u0026rsquo;t have access to a laser cutter at the moment ♥).\nThe plan:   I started by using a Surface Pen to draw what I wanted in a OneNote page.\nPretty straight forward, also considered paper with Sharpies and photo and then tracing, but that seemed like it would take longer.\nAlso it had to involve lasers, so there is an homage to laser safety signs:   Figure out what parts of the design to etch or cut.\nLaser cutters often have two modes, and there are tradeoffs for each mode.\n Cutting is faster, better for finer detail often, and well, cuts stuff. Etching works when you want to change larger areas of your material, kinda like an adjustable laser peeler. I decided that because I can\u0026rsquo;t draw a straight line for anything, I wanted to do the laser emission symbol as a cut that I would use the computer to design. The rest of the letters I wanted to etch to maintain the look as if I had signed it with a pen.  After the types of cut are chosen, the digital file is prepped (this step varies highly on the laser cutter itself, check the manual or software for a guide).\n  Experiment with setting of the laser on a similar material to achieve desired cut.\nWith the file loaded on the control computer, we need to figure out what laser settings achieve the cuts and etches we want. On the laser cutter we used here, this meant varying the speed and power of the laser for each part of the design. These settings do not hold for all materials, and can even change as the laser cutter itself ages, so we had to find good ones for the kind of paperboard the books were. Rather than messing up a book, we used some corrugated cardboard from the box they came in to test. @cgranade has a real knack from experience for guessing good values for these parameters, so this testing went pretty quick. You can see some of his tests here, with notes of what settings he used for each:\nThe \"R\" and \"V\" next to each signature are [@cgranade](https://twitter.com/cgranade)'s notes on what _raster_ and _vector_ settings are needed, which the control software uses to configure etching and cutting (respectively). We ended up going with the one below (with a style modification suggested by @cgranade) because I liked the depth of the etch and the cut was not so deep it would risk cutting through the back page.\n  Test on an actual book!!!\nAfter testing some parameters that worked on our cardboard proxy, it was time to try it on the real thing! I would have normally used some blue painter tape to cover the area I was going to cut to reduce scorching from the laser, but we didn\u0026rsquo;t see much on the cardboard we were testing on and if it did happen it would add to the ambiance :) Also, since each book was not quite flat, the focus of the laser was adjusted for each book to make sure the design looked the same on each. Here is some photos and a video of the cut!\nYour browser does not support the video tag.    Now for the fun part: A GIVEAWAY! Post a picture or description of what word/term you would add to the ABCs of Engineering on Facebook, Instagram, or Twitter with the hashtag #ABCsofEngineering and I will pick 3 at random on Feb 1st and mail a laser signed copy of The ABCs of Engineering to you!\nYou can find copies of ABCs of Engineering at all of the following retailers:\n  Amazon  Indiebound  Barnes \u0026amp; Noble  Books a Million  Booktopia (AU retailer)  ","date":1546474190,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"5b88d6b01f906c7fd6ef2ef11778d573","permalink":"/blog/2019/01/02/give-an-engineer-a-book-to-sign.../","publishdate":"2019-01-02T17:09:50-07:00","relpermalink":"/blog/2019/01/02/give-an-engineer-a-book-to-sign.../","section":"post","summary":"I always start maker projects with the best of intentions to blog what my partner @cgranade and I work on, but sometimes in the excitement of making something new, blogging can get forgotten.","tags":[],"title":"Give an engineer a book to sign...","type":"post"},{"authors":["Chris Ferrie","Sarah Kaiser"],"categories":null,"content":"","date":1546300800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"84534f4dc7b5b6ef3c857dcc4f75e166","permalink":"/publication/ferrie-ab-cs-engineering-2019/","publishdate":"2020-04-30T00:59:59.823765Z","relpermalink":"/publication/ferrie-ab-cs-engineering-2019/","section":"publication","summary":"This alphabetical installment of the Baby University series is the perfect introduction for even the youngest engineer! A is for Amplifier B is for Battery C is for Carnot Engine From amplifier to zoning, the ABCs of Engineering is a colorfully simple introduction for babies--and grownups--to a new engineering concept for every letter of the alphabet. Written by two experts, each page in this engineering primer features multiple levels of text so the book grows along with your little engineer. Also in the Baby University Series: ABCs of Space Organic Chemistry for Babies Quantum Physics for Babies","tags":null,"title":"ABCs of Engineering","type":"publication"},{"authors":["Chris Ferrie","Sarah Kaiser"],"categories":null,"content":"","date":1546300800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"99c814f19993cd53bac86e606b838f73","permalink":"/publication/ferrie-neural-networks-babies-2019/","publishdate":"2020-04-30T00:59:59.826785Z","relpermalink":"/publication/ferrie-neural-networks-babies-2019/","section":"publication","summary":"Help your future genius become the smartest baby in the room by introducing them to neural networks with the next installment of the Baby University board book series!Neural Networks for Babies by Chris Ferrie is a colorfully simple introduction to the study of how machines and computing systems are created in a way that was inspired by the biological neural networks in animal and human brains. It is never too early to become a scientist!With scientific and mathematical information from an expert, this is the perfect book for enlightening the next generation of geniuses.","tags":null,"title":"Neural Networks for Babies","type":"publication"},{"authors":[],"categories":[],"content":" This is a post contributing to #QsAdvent 2018, check out all the others here!\n We are approaching a day of the year where many will open presents from family and friends, after eating until they are uncomfortably full. I thought it would be fun to highlight some tips for working with Q# this holiday break, so you can work on designing quantum algorithms snuggled up by a fire (or at least a space heater if in the northern hemisphere). Some of these may be obvious to different folks, so if you already know then give yourself a pat on the back 😃. Also they are in no particular order other than the order in which they occurred to me while drinking some eggnog and enjoying some Christmas Cake from Smitha, Naomi, and @johnazariah! 🍒 🍰 🎄\nLet\u0026rsquo;s just jump right in!\n1. Easy ways to get new Q# projects started Sometimes it can be daunting to setup new dev environments and start working with a new language. I had never done anything in .NET before learning Q#. As perennial as the IT help advice of turning things off and back on again is, looking at the docs for a new language can help you fast-track learning more than a random walk through StackExchange (though those are helpful too).\nOne thing I came across when going through the docs is the way you can use the .NET Core SDK from the command line to start a new project:\ndotnet new console -lang Q# --output Teleport-Presents  If this doesn\u0026rsquo;t work for you, make sure you have the latest project templates installed:\ndotnet new -i Microsoft.Quantum.ProjectTemplates::0.3.1811.2802-preview  While I love having GUI tools to do certain tasks, I ♥ it when I can script setup/initialization of tasks. (Things like Cookiecutter and personal dotfiles repos ftw.)\n2. Cool editor integrations (+ some amazing @code features too!) Disclaimer: I am an avid Visual Studio Code user ( Live Share and git integration 😍) and am using it with live markdown preview to write this post! I have to use lots of different IDEs for work that are often specially made for the embedded system\u0026rsquo;s language or just because it was how the project was set up. I was so happy to see some awesome Q# integrations to some of the most popular editors and IDEs, which means I can use some familiar tools and get a lot of creature comforts like IntelliSense for real-time feedback on errors. I have listed more links below, but if you use Visual Studio or Visual Studio Code definitely check out the integration for Q#\n  Visual Studio  Visual Studio Code  3. Project-local v. installing One thing thing I have learned troubleshooting my own projects is how Q# projects manage installation of packages they need. It turns out that Q# does things similar to the Pythonic paradigm of project environments (or many other similar implementations). A common experience one might have of \u0026lsquo;installing\u0026rsquo; something is that you run an *.exe or similar and it does a bunch of often inscrutable things and then is in some app menu. This has a drawback though of if you need to manage multiple versions of something installed for different projects. If all the package files for a particular project are \u0026lsquo;installed\u0026rsquo; locally in the project folder then it makes it easy to move things around and importantly you can have many projects on your system that are all independent from each other.\n_How .NET packages are managed, from creation to installation with NuGet (figure used under MIT licence from https://docs.microsoft.com/en-us/nuget/what-is-nuget)_\nAll that they need in common is the .NET Core SDK which is installed in the more traditional system wide sense. Look here for more information about installing the QDK or managing project packages.\n4. Contribution Guide (what repo should I PR on?) So with the recent 0.3 release of the QDK there was a bit of a refactor of the GitHub repos. There are now a couple of different repos so I\u0026rsquo;ll summarize below what each has and what kind of pull requests (git for community contributions!) should go where.\n   Repo What can I find here? What should I contribute here?      Quantum Libraries Q# libraries for the Quantum Development Kit. These are the repos that have the source for libraries in the QDK like the canon and the chemistry ones. Bug fixes, new features for the QDK, anything really that can improve the libraries!    Quantum Microsoft Quantum Development Kit Samples Do you have a cool example of an algorithm, or sample using the QDK libraries you want to share? This is the place!    QuantumKatas Programming exercises for learning Q# and quantum computing This collection of self-passed tutorials could use your notes, bug fixes, and additions to help the community grow!    Quantum-NC Microsoft Quantum Computing Libraries for noncommercial use Unfortunately, not open for contributions.    5. Functions v. Operations There are two concepts in the QDK that were a bit confusing to me at the start, but the difference is pretty clear now. Operations are how you get things done with your qubits, in that they are how you effect change in your system. Operations need not be quantum or interact with qubits, but the main property they have is that they do things. Examples of operations could be a rotation gate acting on a qubit, or rolling a classical die.\nFunctions on the other hand are meant to be more like the mathematical concept: a specification for a deterministic calculation or computation. An example of a function could be a polynomial like $x^2 + x-1$ or the trig function $\\cos(x)$. Operations can involve/use functions, but functions can\u0026rsquo;t call operations because what operations do to the system can be non-deterministic.\nLook here for more information about functions and operations.\n6. A qubit value is NOT a state One fundamental difference between quantum programing and classical programming is the nature of the information you are creating and manipulating. In many classical programing languages, we have the ability to debug programs by pausing them while they are running and inspecting values of variables at any time to try and sort out what your program is doing. We can\u0026rsquo;t exactly do the same with qubits. The very act of inspecting or measuring a qubit changes our qubits where as our classical debugging tools does not.\nNow, if you are using a simulator backend to run your quantum program, it has to record things about what states a qubit could be in and in principle you could look at those values debugging something. However, this should never be relied on part of a quantum program, because you would not be able to do this inspection step without consequences on real hardware. The state of a qubit is not some inherent property of the system, but more of a formalism we have imposed to help us understand their behavior. There are other ways to debug quantum programs but like actual quantum algorithms they are different and interesting in their own right. (Let\u0026rsquo;s not open allllll of the presents early, after all.)\n7. Don\u0026rsquo;t forget to clean up after your qubits! There used to be a time when most programing languages required programmers to manually manage memory. Whether it is because you are trying to squeeze every last ounce of performance out of your hardware or that there is no support for memory management in your language, it adds some complexity to how we think about our programs. Quantum computers have a similar requirement to have information cleanup managed, but for slightly different reasons.\nIn a quantum computer, all operations must be reversible and thus cannot leak any information. (If information leaked in the forward direction, it would make it impossible to run in reverse!) What this means is that when we use qubits for operations, we will need to make sure they end in the same state they started in to make sure we are able to reverse whatever our algorithm does. In Q#, this has the consequence that we need to use the Reset and related functions to make sure our qubits end as they start, in the |0〉state (by convention).\nHow does Reset work you ask? It:\n measures the qubit in the $Z$ basis, then based on the measurement outcome (0 or 1 classical bit values) either does nothing or applies a quantum NOT gate (a.k.a. rotation by 180° about the $X$ axis)  Now if you have already measured your qubit doing a regular Reset or ResetAll is going to introduce some overhead because it does not know what your previous measurement results are. Thankfully if you know you are done with a qubit after you measure it, check out the MResetX, MResetY, and MResetZ functions (more info here) which both measure your qubit for you and use that information to right away reset your qubit!\n8. Tuple-in tuple-out This one is pretty straightforward but basically there is no such thing as void as a return for any function or operation in Q#. You will always get a tuple return even if it\u0026rsquo;s an empty tuple.\nFor more information on the type system in Q# see here.\n9. .NET what now? Probably one the most common issues I see on forums and whatnot is installation problems with .NET Core SDK. This is understandable, I myself had to do some research on what the difference was between .NET Core, .NET Standard, and .NET Framework. Plus, each has an option to just install a runtime or a full SDK. The tl;dr is that .NET Framework is for Windows, while .NET Core is a cross-platform version of .NET \u0026mdash; it\u0026rsquo;s not a strict subset of the functionality, but adds in a few nice things along the way. .NET Standard is the proper subset of both .NET Core and .NET Framework that works on all systems (see below figure).\nThe bottom line is that Q# is designed to only need the .NET Standard components, but that is not distributed separately from the other two .NET versions. So the install guide for Q# suggests to download and install the .NET Core SDK and then you will have the components you need from .NET Standard for use on either .NET Framework or .NET Core, as well as a more cross-platform SDK.\n10. Is my computer a quantum computer now? No, sadly installing the QDK will not magically turn your computer into a quantum computer. Nor will you be able to break RSA or run a quantum internet browser. You will have your same classical device but that can for the moment simulate small quantum systems and help you learn how to develop your own quantum algorithms! For more directly from the developers as to why they made Q# see their post here\nHopefully at least one of these tips will make a good stocking stuffer! I\u0026rsquo;ll finish out with some more links to online resources from \u0026lsquo;round the net where people are discussing, learning, and asking questions about Q#!\n Also on social media use the tags #qsharp and #qsharpeningmyskills so all quantum programmers can help learn together 💖\n Happy Hamiltonians and may you find your ground state in 2019! 🎁⛄❄🍷🎶💻\n  Q# stack overflow  MSFT Quantum Team Blog  Q# Advent Calendar  ","date":1545462000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"44c056e66b4aac9128bc6ecd4e7bbcff","permalink":"/blog/2018/12/22/opening-presents-early/","publishdate":"2018-12-22T00:00:00-07:00","relpermalink":"/blog/2018/12/22/opening-presents-early/","section":"post","summary":"This is a post contributing to #QsAdvent 2018, check out all the others here!\n We are approaching a day of the year where many will open presents from family and friends, after eating until they are uncomfortably full.","tags":["qsharp-advent","qsharp","tips"],"title":"Opening Presents Early","type":"post"},{"authors":[],"categories":null,"content":"","date":1538704800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"601f126b951c8eccce1f6dff34e76bda","permalink":"/research/talks/quantum-machine-learning-in-context-what-is-a-quantum-algorithm-anyway/","publishdate":"2020-05-12T13:43:53-07:00","relpermalink":"/research/talks/quantum-machine-learning-in-context-what-is-a-quantum-algorithm-anyway/","section":"talk","summary":"In the rush to add the word _quantum_ to everything from batteries to banking, Quantum machine learning has entered the fray. A perfect combination of buzzwords that will get all of the funding....right? In this talk I want to look at quantum algorithms and what actually constitutes programming a quantum computer. With this context, we can look at what machine learning tasks are being explored for possible speedups with quantum computing.","tags":[],"title":"Quantum Machine Learning in context: What is a quantum algorithm anyway?","type":"talk"},{"authors":[],"categories":null,"content":"","date":1498165200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"870d35aa8fa40839e0055e61150b661d","permalink":"/research/talks/super-cool-science-an-exploration-of-modern-experiment/","publishdate":"2020-05-12T13:43:28-07:00","relpermalink":"/research/talks/super-cool-science-an-exploration-of-modern-experiment/","section":"talk","summary":"","tags":[],"title":"Super Cool Science: An Exploration Of Modern Experiment","type":"talk"},{"authors":[],"categories":null,"content":"","date":1496031000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"045464a631e490c11ab2029e93bc8e61","permalink":"/research/talks/spontaneous-superradiance-from-single-diamond-nanocrystals/","publishdate":"2020-05-12T13:43:21-07:00","relpermalink":"/research/talks/spontaneous-superradiance-from-single-diamond-nanocrystals/","section":"talk","summary":"Nanocrystalline diamond (≤ 100 nm) is a unique material that combines the extreme physical and optical properties of diamond with the high surface area and chemical reactivity of nanomaterials. Nanodiamond has attracted increasing attention over the past few decades due to its striking potential for applications in nanotechnology. Besides the extraordinary material properties, nanodiamond is host to a large variety of fluorescent colour centres [1], including the nitrogen-vacancy (NV) centre. The NV is among the most studied defects in diamond, with proposed and realised applications in quantum optics [2], quantum information [3, 4, 5] and ultra-high resolution sensing [6, 7]. In life science, diamond nanoparticles containing fluorescent NV centres are also used as non-toxic bio-labels for biomedical imaging and drug-delivery [8, 9]. The feasibility of many of these nanodiamond-based applications heavily relies on the spin and optical properties of the centre. In diamond nanoparticles containing a high density of NVs, one such property is called superradiance. Superradiance occurs when several identical emitters are highly confined in space ($~V","tags":[],"title":"Spontaneous Superradiance from Single Diamond Nanocrystals","type":"talk"},{"authors":[],"categories":null,"content":"","date":1491368400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"e42ec52d4d179b42b263fa52499990f8","permalink":"/research/talks/extending-the-reach-of-qkd/","publishdate":"2020-05-12T13:43:02-07:00","relpermalink":"/research/talks/extending-the-reach-of-qkd/","section":"talk","summary":"Cryptography is an important social and technical aspect of our modern world. The physical nature by which we can obscure or encrypt information has changed drastically with new technologies that allow for the manipulation of quantum information. We now use Quantum Key Distribution (QKD) quite readily to exchange random bit strings called keys between parties. I will discuss some of the possible paths forward to making this a practical technology, including looking at hardware vulnerabilities as well as how to extend the physical reach of the systems.","tags":["qkd"],"title":"Extending the reach of QKD","type":"talk"},{"authors":[],"categories":null,"content":"","date":1487833200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"6f1e897b5b7e7e41aa1294146a169f74","permalink":"/research/talks/photon-phreaking-what-quantum-can-actually-do-for-security/","publishdate":"2020-05-12T13:42:49-07:00","relpermalink":"/research/talks/photon-phreaking-what-quantum-can-actually-do-for-security/","section":"talk","summary":"What properties of quantum systems can be useful for cryptography? Quantum systems have the potential to be new cryptographic tools and force us to re-examine our current assumptions of computational complexity. We will look at some interesting examples of the new tech and protocols like quantum key distribution and “quantum hacking”, quantum random number generators, quantum computing and algorithms. What consequences do these technologies have for our current cryptographic infrastructure?","tags":["qkd"],"title":"Photon phreaking: What quantum can (actually) do for security","type":"talk"},{"authors":["Christopher J Pugh","Sarah Kaiser","Jean-Philippe Bourgoin","Jeongwan Jin","Nigar Sultana","Sascha Agne","Elena Anisimova","Vadim Makarov","Eric Choi","Brendon L Higgins"," others"],"categories":null,"content":"","date":1483228800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"13b51e306c9bca2364e2de17ad7e3272","permalink":"/publication/pugh-airborne-demonstration-quantum-2017/","publishdate":"2020-04-30T00:59:59.841756Z","relpermalink":"/publication/pugh-airborne-demonstration-quantum-2017/","section":"publication","summary":"","tags":null,"title":"Airborne Demonstration of a Quantum Key Distribution Receiver Payload","type":"publication"},{"authors":[],"categories":null,"content":"","date":1470837600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"f01fb1ffb7beeb45f5c87fe017a9a92b","permalink":"/research/talks/quantum-key-distribution-devices-how-to-make-them-and-how-to-break-them/","publishdate":"2016-08-10T09:00:00-05:00","relpermalink":"/research/talks/quantum-key-distribution-devices-how-to-make-them-and-how-to-break-them/","section":"talk","summary":"As more aspects of modern society depend on digital communication, we increasingly rely on infrastructure that ensures the privacy and security of this communication. Classically, this has been provided by cryptographic protocols such as public-key encryption, in which secrets called keys are exchanged between different parties to enable secure communication. The rapid development of quantum algorithms which violate the assumptions of these protocols, however, poses a security challenge to modern cryptography. Quantum resources can also be used to strengthen cryptographic security, particularly the security of key exchange protocols. This approach, QKD, can be implemented by encoding in quantum systems such as single photons sent through free-space or a fiber. Fiber based QKD devices are already commercially available, but are fundamentally limited to distributing keys over a few hundred kilometers. To address this distance limitation, research QKD systems are being developed to exchange keys through free-space to satellites. This work considers practical challenges to building and testing both types of QKD devices. Firstly, we consider modeling and mission analysis for airborne demonstrations of QKD to stratospheric balloons and aircraft to simulate a satellite. Based on the mission parameters available for both platforms, we found aircraft platforms were more promising for testing prototype QKD satellite systems. We developed a mission planning tool to help design the flight geometries for testing the device. Next, we developed three new components for a QKD satellite prototype. The requirements for electro-optical devices in orbit are very different from lab environments, mandating new approaches to designing QKD devices. We developed a quad single photon detector package to meet the requirements for free-space links to low earth orbit. Moreover, we designed and built optical systems for analyzing the polarization of photons and an adaptive optics unit to increase the efficiency of collecting the encoded photons. All three devices were tested in conditions that simulated the time and loss of a satellite pass. Finally, we demonstrated a laser damage attack on a live commercial QKD system. Our attack injected additional optical power into the sender device to modify security-critical components. Specifically, our attack damaged the PIN diodes which monitor the encoded photon number, reducing their sensitivity or completely blinding them. Our damage could compromise the entire key, and was performed during system operation while raising no alarms. In summary, this work shows the trade-offs of testing QKD payloads on different airborne platforms, develops components for a satellite QKD payload, and demonstrates a security vulnerability in a commercial QKD system that can fully compromise the key. These results help address practical challenges to building QKD devices, improving the security of modern cryptography.","tags":[],"title":"Quantum key distribution devices: How to make them and how to break them","type":"talk"},{"authors":["Sarah Kaiser"],"categories":null,"content":"","date":1470009600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"333026b3843a5b76134892d82b61e5c8","permalink":"/publication/kaiser-quantum-key-distribution-2016/","publishdate":"2020-04-30T00:59:59.835016Z","relpermalink":"/publication/kaiser-quantum-key-distribution-2016/","section":"publication","summary":"As more aspects of modern society depend on digital communication, we increasingly rely on infrastructure that ensures the privacy and security of this communication. Classically, this has been provided by cryptographic protocols such as public-key encryption, in which secrets called keys are exchanged between different parties to enable secure communication. The rapid development of quantum algorithms which violate the assumptions of these protocols, however, poses a security challenge to modern cryptography.   Quantum resources can also be used to strengthen cryptographic security, particularly the security of key exchange protocols. This approach, QKD, can be implemented by encoding in quantum systems such as single photons sent through free-space or a fiber. Fiber based QKD devices are already commercially available, but are fundamentally limited to distributing keys over a few hundred kilometers. To address this distance limitation, research QKD systems are being developed to exchange keys through free-space to satellites. This work considers practical challenges to building and testing both types of QKD devices.   Firstly, we consider modeling and mission analysis for airborne demonstrations of QKD to stratospheric balloons and aircraft to simulate a satellite. Based on the mission parameters available for both platforms, we found aircraft platforms were more promising for testing prototype QKD satellite systems. We developed a mission planning tool to help design the flight geometries for testing the device.   Next, we developed three new components for a QKD satellite prototype. The requirements for electro-optical devices in orbit are very different from lab environments, mandating new approaches to designing QKD devices. We developed a quad single photon detector package to meet the requirements for free-space links to low earth orbit. Moreover, we designed and built optical systems for analyzing the polarization of photons and an adaptive optics unit to increase the efficiency of collecting the encoded photons. All three devices were tested in conditions that simulated the time and loss of a satellite pass.    Finally, we demonstrated a laser damage attack on a live commercial QKD system. Our attack injected additional optical power into the sender device to modify security-critical components. Specifically, our attack damaged the PIN diodes which monitor the encoded photon number, reducing their sensitivity or completely blinding them. Our damage could compromise the entire key, and was performed during system operation while raising no alarms.    In summary, this work shows the trade-offs of testing QKD payloads on different airborne platforms, develops components for a satellite QKD payload, and demonstrates a security vulnerability in a commercial QKD system that can fully compromise the key. These results help address practical challenges to building QKD devices, improving the security of modern cryptography.","tags":null,"title":"Quantum Key Distribution Devices: How to Make Them and How to Break Them","type":"publication"},{"authors":["Sarah Kaiser"],"categories":null,"content":"","date":1459490400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"4867342299abf6f2838745dd5ce03435","permalink":"/research/talks/practical-quantum-cryptography-devices-how-to-make-them-and-how-to-break-them/","publishdate":"2016-04-01T16:00:00+10:00","relpermalink":"/research/talks/practical-quantum-cryptography-devices-how-to-make-them-and-how-to-break-them/","section":"talk","summary":"Long-distance quantum communication systems are of interest for commercial and fundamental scientific projects. Commercially available Quantum Key Distribution (QKD) devices that claim physical security of generated keys rely on telecom fiber networks to link communicating parties. This talk will address two main aspects to making QKD devices practical: satellites can be used to extend the range of the QKD devices past the current limit of ~200km, and all current implementations of QKD are insecure due to hardware vulnerabilities. I will also identify remaining challenges for practical long distance quantum communication.","tags":["research","qkd"],"title":"Practical Quantum Cryptography Devices: How To Make Them And How To Break Them","type":"talk"},{"authors":["Vadim Makarov","Jean-Philippe Bourgoin","Poompong Chaiwongkhot","Mathieu Gagné","Thomas Jennewein","Sarah Kaiser","Raman Kashyap","Matthieu Legré","Carter Minshull","Shihan Sajeed"],"categories":null,"content":"","date":1451606400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"6466e76ad4ea9de70920c74c8d6479de","permalink":"/publication/makarov-creation-backdoors-quantum-2016/","publishdate":"2020-04-30T00:59:59.837763Z","relpermalink":"/publication/makarov-creation-backdoors-quantum-2016/","section":"publication","summary":"","tags":null,"title":"Creation of Backdoors in Quantum Communications via Laser Damage","type":"publication"},{"authors":null,"categories":null,"content":"","date":1433116800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"f4ff6a7c3f10cfc22f7aaeb357a6529b","permalink":"/publication/quantum-safe-cryptography-2015/","publishdate":"2020-04-30T00:59:59.844756Z","relpermalink":"/publication/quantum-safe-cryptography-2015/","section":"publication","summary":"","tags":null,"title":"Quantum Safe Cryptography and Security - An Introduction, Benefits, Enablers and Challenges","type":"publication"},{"authors":["Shihan Sajeed","Igor Radchenko","Sarah Kaiser","Jean-Philippe Bourgoin","Anna Pappa","Laurent Monat","Matthieu Legré","Vadim Makarov"],"categories":null,"content":"","date":1420070400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"95454a13232a38866a71f63144828db5","permalink":"/publication/sajeed-attacks-exploiting-deviation-2015/","publishdate":"2020-04-30T00:59:59.846757Z","relpermalink":"/publication/sajeed-attacks-exploiting-deviation-2015/","section":"publication","summary":"","tags":null,"title":"Attacks Exploiting Deviation of Mean Photon Number in Quantum Key Distribution and Coin Tossing","type":"publication"},{"authors":["Feihu Xu","Kejin Wei","Shihan Sajeed","Sarah Kaiser","Shihai Sun","Zhiyuan Tang","Li Qian","Vadim Makarov","Hoi-Kwong Lo"],"categories":null,"content":"","date":1420070400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"630aa7552c90b2ca9ee3b8a5f12a43fd","permalink":"/publication/xu-experimental-quantum-key-2015/","publishdate":"2020-04-30T00:59:59.849756Z","relpermalink":"/publication/xu-experimental-quantum-key-2015/","section":"publication","summary":"","tags":null,"title":"Experimental Quantum Key Distribution with Source Flaws","type":"publication"},{"authors":["Jean-Philippe Bourgoin","Brendon L Higgins","Nikolay Gigov","Catherine Holloway","Christopher J Pugh","Sarah Kaiser","Miles Cranmer","Thomas Jennewein"],"categories":null,"content":"","date":1420070400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594451810,"objectID":"2328288b85c8803f110347ef7e16aab3","permalink":"/publication/bourgoin-freespace-quantum-key-2015/","publishdate":"2020-04-30T00:59:59.820797Z","relpermalink":"/publication/bourgoin-freespace-quantum-key-2015/","section":"publication","summary":"","tags":null,"title":"Free-Space Quantum Key Distribution to a Moving Receiver","type":"publication"}]